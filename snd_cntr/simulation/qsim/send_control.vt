// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2019 17:30:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    send_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module send_control_vlg_sample_tst(
	clk,
	r_w,
	recieve,
	sampler_tx
);
input  clk;
input  r_w;
input  recieve;
output sampler_tx;

reg sample;
time current_time;
always @(clk or r_w or recieve)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module send_control_vlg_check_tst (
	r_perm,
	send,
	w_perm,
	sampler_rx
);
input  r_perm;
input  send;
input  w_perm;
input sampler_rx;

reg  r_perm_expected;
reg  send_expected;
reg  w_perm_expected;

reg  r_perm_prev;
reg  send_prev;
reg  w_perm_prev;

reg  r_perm_expected_prev;
reg  send_expected_prev;
reg  w_perm_expected_prev;

reg  last_r_perm_exp;
reg  last_send_exp;
reg  last_w_perm_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	r_perm_prev = r_perm;
	send_prev = send;
	w_perm_prev = w_perm;
end

// update expected /o prevs

always @(trigger)
begin
	r_perm_expected_prev = r_perm_expected;
	send_expected_prev = send_expected;
	w_perm_expected_prev = w_perm_expected;
end



// expected r_perm
initial
begin
	r_perm_expected = 1'bX;
end 

// expected send
initial
begin
	send_expected = 1'bX;
end 

// expected w_perm
initial
begin
	w_perm_expected = 1'bX;
end 
// generate trigger
always @(r_perm_expected or r_perm or send_expected or send or w_perm_expected or w_perm)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected r_perm = %b | expected send = %b | expected w_perm = %b | ",r_perm_expected_prev,send_expected_prev,w_perm_expected_prev);
	$display("| real r_perm = %b | real send = %b | real w_perm = %b | ",r_perm_prev,send_prev,w_perm_prev);
`endif
	if (
		( r_perm_expected_prev !== 1'bx ) && ( r_perm_prev !== r_perm_expected_prev )
		&& ((r_perm_expected_prev !== last_r_perm_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_perm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_perm_expected_prev);
		$display ("     Real value = %b", r_perm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_r_perm_exp = r_perm_expected_prev;
	end
	if (
		( send_expected_prev !== 1'bx ) && ( send_prev !== send_expected_prev )
		&& ((send_expected_prev !== last_send_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port send :: @time = %t",  $realtime);
		$display ("     Expected value = %b", send_expected_prev);
		$display ("     Real value = %b", send_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_send_exp = send_expected_prev;
	end
	if (
		( w_perm_expected_prev !== 1'bx ) && ( w_perm_prev !== w_perm_expected_prev )
		&& ((w_perm_expected_prev !== last_w_perm_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w_perm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w_perm_expected_prev);
		$display ("     Real value = %b", w_perm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w_perm_exp = w_perm_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module send_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg r_w;
reg recieve;
// wires                                               
wire r_perm;
wire send;
wire w_perm;

wire sampler;                             

// assign statements (if any)                          
send_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.r_perm(r_perm),
	.r_w(r_w),
	.recieve(recieve),
	.send(send),
	.w_perm(w_perm)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// r_w
initial
begin
	r_w = 1'b0;
end 

// recieve
initial
begin
	recieve = 1'b0;
end 

send_control_vlg_sample_tst tb_sample (
	.clk(clk),
	.r_w(r_w),
	.recieve(recieve),
	.sampler_tx(sampler)
);

send_control_vlg_check_tst tb_out(
	.r_perm(r_perm),
	.send(send),
	.w_perm(w_perm),
	.sampler_rx(sampler)
);
endmodule

