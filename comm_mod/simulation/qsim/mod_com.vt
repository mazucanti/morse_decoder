// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2019 17:49:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mod_com
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mod_com_vlg_sample_tst(
	clk,
	code_0_1,
	code_0_0,
	code_1_1,
	code_1_0,
	code_2_1,
	code_2_0,
	code_3_1,
	code_3_0,
	code_4_1,
	code_4_0,
	enter,
	sampler_tx
);
input  clk;
input  code_0_1;
input  code_0_0;
input  code_1_1;
input  code_1_0;
input  code_2_1;
input  code_2_0;
input  code_3_1;
input  code_3_0;
input  code_4_1;
input  code_4_0;
input  enter;
output sampler_tx;

reg sample;
time current_time;
always @(clk or code_0_1 or code_0_0 or code_1_1 or code_1_0 or code_2_1 or code_2_0 or code_3_1 or code_3_0 or code_4_1 or code_4_0 or enter)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mod_com_vlg_check_tst (
	code_0_1,
	code_0_0,
	code_1_1,
	code_1_0,
	code_2_1,
	code_2_0,
	code_3_1,
	code_3_0,
	code_4_1,
	code_4_0,
	symbol,
	sampler_rx
);
input  code_0_1;
input  code_0_0;
input  code_1_1;
input  code_1_0;
input  code_2_1;
input  code_2_0;
input  code_3_1;
input  code_3_0;
input  code_4_1;
input  code_4_0;
input [31:0] symbol;
input sampler_rx;

reg  code_0_1_expected;
reg  code_0_0_expected;
reg  code_1_1_expected;
reg  code_1_0_expected;
reg  code_2_1_expected;
reg  code_2_0_expected;
reg  code_3_1_expected;
reg  code_3_0_expected;
reg  code_4_1_expected;
reg  code_4_0_expected;
reg [31:0] symbol_expected;

reg  code_0_1_prev;
reg  code_0_0_prev;
reg  code_1_1_prev;
reg  code_1_0_prev;
reg  code_2_1_prev;
reg  code_2_0_prev;
reg  code_3_1_prev;
reg  code_3_0_prev;
reg  code_4_1_prev;
reg  code_4_0_prev;
reg [31:0] symbol_prev;

reg  code_0_1_expected_prev;
reg  code_0_0_expected_prev;
reg  code_1_1_expected_prev;
reg  code_1_0_expected_prev;
reg  code_2_1_expected_prev;
reg  code_2_0_expected_prev;
reg  code_3_1_expected_prev;
reg  code_3_0_expected_prev;
reg  code_4_1_expected_prev;
reg  code_4_0_expected_prev;
reg [31:0] symbol_expected_prev;

reg  last_code_0_1_exp;
reg  last_code_0_0_exp;
reg  last_code_1_1_exp;
reg  last_code_1_0_exp;
reg  last_code_2_1_exp;
reg  last_code_2_0_exp;
reg  last_code_3_1_exp;
reg  last_code_3_0_exp;
reg  last_code_4_1_exp;
reg  last_code_4_0_exp;
reg [31:0] last_symbol_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	code_0_1_prev = code_0_1;
	code_0_0_prev = code_0_0;
	code_1_1_prev = code_1_1;
	code_1_0_prev = code_1_0;
	code_2_1_prev = code_2_1;
	code_2_0_prev = code_2_0;
	code_3_1_prev = code_3_1;
	code_3_0_prev = code_3_0;
	code_4_1_prev = code_4_1;
	code_4_0_prev = code_4_0;
	symbol_prev = symbol;
end

// update expected /o prevs

always @(trigger)
begin
	code_0_1_expected_prev = code_0_1_expected;
	code_0_0_expected_prev = code_0_0_expected;
	code_1_1_expected_prev = code_1_1_expected;
	code_1_0_expected_prev = code_1_0_expected;
	code_2_1_expected_prev = code_2_1_expected;
	code_2_0_expected_prev = code_2_0_expected;
	code_3_1_expected_prev = code_3_1_expected;
	code_3_0_expected_prev = code_3_0_expected;
	code_4_1_expected_prev = code_4_1_expected;
	code_4_0_expected_prev = code_4_0_expected;
	symbol_expected_prev = symbol_expected;
end


// expected symbol[ 31 ]
initial
begin
	symbol_expected[31] = 1'bX;
end 
// expected symbol[ 30 ]
initial
begin
	symbol_expected[30] = 1'bX;
end 
// expected symbol[ 29 ]
initial
begin
	symbol_expected[29] = 1'bX;
end 
// expected symbol[ 28 ]
initial
begin
	symbol_expected[28] = 1'bX;
end 
// expected symbol[ 27 ]
initial
begin
	symbol_expected[27] = 1'bX;
end 
// expected symbol[ 26 ]
initial
begin
	symbol_expected[26] = 1'bX;
end 
// expected symbol[ 25 ]
initial
begin
	symbol_expected[25] = 1'bX;
end 
// expected symbol[ 24 ]
initial
begin
	symbol_expected[24] = 1'bX;
end 
// expected symbol[ 23 ]
initial
begin
	symbol_expected[23] = 1'bX;
end 
// expected symbol[ 22 ]
initial
begin
	symbol_expected[22] = 1'bX;
end 
// expected symbol[ 21 ]
initial
begin
	symbol_expected[21] = 1'bX;
end 
// expected symbol[ 20 ]
initial
begin
	symbol_expected[20] = 1'bX;
end 
// expected symbol[ 19 ]
initial
begin
	symbol_expected[19] = 1'bX;
end 
// expected symbol[ 18 ]
initial
begin
	symbol_expected[18] = 1'bX;
end 
// expected symbol[ 17 ]
initial
begin
	symbol_expected[17] = 1'bX;
end 
// expected symbol[ 16 ]
initial
begin
	symbol_expected[16] = 1'bX;
end 
// expected symbol[ 15 ]
initial
begin
	symbol_expected[15] = 1'bX;
end 
// expected symbol[ 14 ]
initial
begin
	symbol_expected[14] = 1'bX;
end 
// expected symbol[ 13 ]
initial
begin
	symbol_expected[13] = 1'bX;
end 
// expected symbol[ 12 ]
initial
begin
	symbol_expected[12] = 1'bX;
end 
// expected symbol[ 11 ]
initial
begin
	symbol_expected[11] = 1'bX;
end 
// expected symbol[ 10 ]
initial
begin
	symbol_expected[10] = 1'bX;
end 
// expected symbol[ 9 ]
initial
begin
	symbol_expected[9] = 1'bX;
end 
// expected symbol[ 8 ]
initial
begin
	symbol_expected[8] = 1'bX;
end 
// expected symbol[ 7 ]
initial
begin
	symbol_expected[7] = 1'bX;
end 
// expected symbol[ 6 ]
initial
begin
	symbol_expected[6] = 1'bX;
end 
// expected symbol[ 5 ]
initial
begin
	symbol_expected[5] = 1'bX;
end 
// expected symbol[ 4 ]
initial
begin
	symbol_expected[4] = 1'bX;
end 
// expected symbol[ 3 ]
initial
begin
	symbol_expected[3] = 1'bX;
end 
// expected symbol[ 2 ]
initial
begin
	symbol_expected[2] = 1'bX;
end 
// expected symbol[ 1 ]
initial
begin
	symbol_expected[1] = 1'bX;
end 
// expected symbol[ 0 ]
initial
begin
	symbol_expected[0] = 1'bX;
end 
// generate trigger
always @(code_0_1_expected or code_0_1 or code_0_0_expected or code_0_0 or code_1_1_expected or code_1_1 or code_1_0_expected or code_1_0 or code_2_1_expected or code_2_1 or code_2_0_expected or code_2_0 or code_3_1_expected or code_3_1 or code_3_0_expected or code_3_0 or code_4_1_expected or code_4_1 or code_4_0_expected or code_4_0 or symbol_expected or symbol)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected code_0_1 = %b | expected code_0_0 = %b | expected code_1_1 = %b | expected code_1_0 = %b | expected code_2_1 = %b | expected code_2_0 = %b | expected code_3_1 = %b | expected code_3_0 = %b | expected code_4_1 = %b | expected code_4_0 = %b | expected symbol = %b | ",code_0_1_expected_prev,code_0_0_expected_prev,code_1_1_expected_prev,code_1_0_expected_prev,code_2_1_expected_prev,code_2_0_expected_prev,code_3_1_expected_prev,code_3_0_expected_prev,code_4_1_expected_prev,code_4_0_expected_prev,symbol_expected_prev);
	$display("| real code_0_1 = %b | real code_0_0 = %b | real code_1_1 = %b | real code_1_0 = %b | real code_2_1 = %b | real code_2_0 = %b | real code_3_1 = %b | real code_3_0 = %b | real code_4_1 = %b | real code_4_0 = %b | real symbol = %b | ",code_0_1_prev,code_0_0_prev,code_1_1_prev,code_1_0_prev,code_2_1_prev,code_2_0_prev,code_3_1_prev,code_3_0_prev,code_4_1_prev,code_4_0_prev,symbol_prev);
`endif
	if (
		( code_0_1_expected_prev !== 1'bx ) && ( code_0_1_prev !== code_0_1_expected_prev )
		&& ((code_0_1_expected_prev !== last_code_0_1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_0_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_0_1_expected_prev);
		$display ("     Real value = %b", code_0_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_0_1_exp = code_0_1_expected_prev;
	end
	if (
		( code_0_0_expected_prev !== 1'bx ) && ( code_0_0_prev !== code_0_0_expected_prev )
		&& ((code_0_0_expected_prev !== last_code_0_0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_0_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_0_0_expected_prev);
		$display ("     Real value = %b", code_0_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_0_0_exp = code_0_0_expected_prev;
	end
	if (
		( code_1_1_expected_prev !== 1'bx ) && ( code_1_1_prev !== code_1_1_expected_prev )
		&& ((code_1_1_expected_prev !== last_code_1_1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_1_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_1_1_expected_prev);
		$display ("     Real value = %b", code_1_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_code_1_1_exp = code_1_1_expected_prev;
	end
	if (
		( code_1_0_expected_prev !== 1'bx ) && ( code_1_0_prev !== code_1_0_expected_prev )
		&& ((code_1_0_expected_prev !== last_code_1_0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_1_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_1_0_expected_prev);
		$display ("     Real value = %b", code_1_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_code_1_0_exp = code_1_0_expected_prev;
	end
	if (
		( code_2_1_expected_prev !== 1'bx ) && ( code_2_1_prev !== code_2_1_expected_prev )
		&& ((code_2_1_expected_prev !== last_code_2_1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_2_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_2_1_expected_prev);
		$display ("     Real value = %b", code_2_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_code_2_1_exp = code_2_1_expected_prev;
	end
	if (
		( code_2_0_expected_prev !== 1'bx ) && ( code_2_0_prev !== code_2_0_expected_prev )
		&& ((code_2_0_expected_prev !== last_code_2_0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_2_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_2_0_expected_prev);
		$display ("     Real value = %b", code_2_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_code_2_0_exp = code_2_0_expected_prev;
	end
	if (
		( code_3_1_expected_prev !== 1'bx ) && ( code_3_1_prev !== code_3_1_expected_prev )
		&& ((code_3_1_expected_prev !== last_code_3_1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_3_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_3_1_expected_prev);
		$display ("     Real value = %b", code_3_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_code_3_1_exp = code_3_1_expected_prev;
	end
	if (
		( code_3_0_expected_prev !== 1'bx ) && ( code_3_0_prev !== code_3_0_expected_prev )
		&& ((code_3_0_expected_prev !== last_code_3_0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_3_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_3_0_expected_prev);
		$display ("     Real value = %b", code_3_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_code_3_0_exp = code_3_0_expected_prev;
	end
	if (
		( code_4_1_expected_prev !== 1'bx ) && ( code_4_1_prev !== code_4_1_expected_prev )
		&& ((code_4_1_expected_prev !== last_code_4_1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_4_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_4_1_expected_prev);
		$display ("     Real value = %b", code_4_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_code_4_1_exp = code_4_1_expected_prev;
	end
	if (
		( code_4_0_expected_prev !== 1'bx ) && ( code_4_0_prev !== code_4_0_expected_prev )
		&& ((code_4_0_expected_prev !== last_code_4_0_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_4_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_4_0_expected_prev);
		$display ("     Real value = %b", code_4_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_code_4_0_exp = code_4_0_expected_prev;
	end
	if (
		( symbol_expected_prev[0] !== 1'bx ) && ( symbol_prev[0] !== symbol_expected_prev[0] )
		&& ((symbol_expected_prev[0] !== last_symbol_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[0] = symbol_expected_prev[0];
	end
	if (
		( symbol_expected_prev[1] !== 1'bx ) && ( symbol_prev[1] !== symbol_expected_prev[1] )
		&& ((symbol_expected_prev[1] !== last_symbol_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[1] = symbol_expected_prev[1];
	end
	if (
		( symbol_expected_prev[2] !== 1'bx ) && ( symbol_prev[2] !== symbol_expected_prev[2] )
		&& ((symbol_expected_prev[2] !== last_symbol_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[2] = symbol_expected_prev[2];
	end
	if (
		( symbol_expected_prev[3] !== 1'bx ) && ( symbol_prev[3] !== symbol_expected_prev[3] )
		&& ((symbol_expected_prev[3] !== last_symbol_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[3] = symbol_expected_prev[3];
	end
	if (
		( symbol_expected_prev[4] !== 1'bx ) && ( symbol_prev[4] !== symbol_expected_prev[4] )
		&& ((symbol_expected_prev[4] !== last_symbol_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[4] = symbol_expected_prev[4];
	end
	if (
		( symbol_expected_prev[5] !== 1'bx ) && ( symbol_prev[5] !== symbol_expected_prev[5] )
		&& ((symbol_expected_prev[5] !== last_symbol_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[5] = symbol_expected_prev[5];
	end
	if (
		( symbol_expected_prev[6] !== 1'bx ) && ( symbol_prev[6] !== symbol_expected_prev[6] )
		&& ((symbol_expected_prev[6] !== last_symbol_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[6] = symbol_expected_prev[6];
	end
	if (
		( symbol_expected_prev[7] !== 1'bx ) && ( symbol_prev[7] !== symbol_expected_prev[7] )
		&& ((symbol_expected_prev[7] !== last_symbol_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[7] = symbol_expected_prev[7];
	end
	if (
		( symbol_expected_prev[8] !== 1'bx ) && ( symbol_prev[8] !== symbol_expected_prev[8] )
		&& ((symbol_expected_prev[8] !== last_symbol_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[8] = symbol_expected_prev[8];
	end
	if (
		( symbol_expected_prev[9] !== 1'bx ) && ( symbol_prev[9] !== symbol_expected_prev[9] )
		&& ((symbol_expected_prev[9] !== last_symbol_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[9] = symbol_expected_prev[9];
	end
	if (
		( symbol_expected_prev[10] !== 1'bx ) && ( symbol_prev[10] !== symbol_expected_prev[10] )
		&& ((symbol_expected_prev[10] !== last_symbol_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[10] = symbol_expected_prev[10];
	end
	if (
		( symbol_expected_prev[11] !== 1'bx ) && ( symbol_prev[11] !== symbol_expected_prev[11] )
		&& ((symbol_expected_prev[11] !== last_symbol_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[11] = symbol_expected_prev[11];
	end
	if (
		( symbol_expected_prev[12] !== 1'bx ) && ( symbol_prev[12] !== symbol_expected_prev[12] )
		&& ((symbol_expected_prev[12] !== last_symbol_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[12] = symbol_expected_prev[12];
	end
	if (
		( symbol_expected_prev[13] !== 1'bx ) && ( symbol_prev[13] !== symbol_expected_prev[13] )
		&& ((symbol_expected_prev[13] !== last_symbol_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[13] = symbol_expected_prev[13];
	end
	if (
		( symbol_expected_prev[14] !== 1'bx ) && ( symbol_prev[14] !== symbol_expected_prev[14] )
		&& ((symbol_expected_prev[14] !== last_symbol_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[14] = symbol_expected_prev[14];
	end
	if (
		( symbol_expected_prev[15] !== 1'bx ) && ( symbol_prev[15] !== symbol_expected_prev[15] )
		&& ((symbol_expected_prev[15] !== last_symbol_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[15] = symbol_expected_prev[15];
	end
	if (
		( symbol_expected_prev[16] !== 1'bx ) && ( symbol_prev[16] !== symbol_expected_prev[16] )
		&& ((symbol_expected_prev[16] !== last_symbol_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[16] = symbol_expected_prev[16];
	end
	if (
		( symbol_expected_prev[17] !== 1'bx ) && ( symbol_prev[17] !== symbol_expected_prev[17] )
		&& ((symbol_expected_prev[17] !== last_symbol_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[17] = symbol_expected_prev[17];
	end
	if (
		( symbol_expected_prev[18] !== 1'bx ) && ( symbol_prev[18] !== symbol_expected_prev[18] )
		&& ((symbol_expected_prev[18] !== last_symbol_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[18] = symbol_expected_prev[18];
	end
	if (
		( symbol_expected_prev[19] !== 1'bx ) && ( symbol_prev[19] !== symbol_expected_prev[19] )
		&& ((symbol_expected_prev[19] !== last_symbol_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[19] = symbol_expected_prev[19];
	end
	if (
		( symbol_expected_prev[20] !== 1'bx ) && ( symbol_prev[20] !== symbol_expected_prev[20] )
		&& ((symbol_expected_prev[20] !== last_symbol_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[20] = symbol_expected_prev[20];
	end
	if (
		( symbol_expected_prev[21] !== 1'bx ) && ( symbol_prev[21] !== symbol_expected_prev[21] )
		&& ((symbol_expected_prev[21] !== last_symbol_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[21] = symbol_expected_prev[21];
	end
	if (
		( symbol_expected_prev[22] !== 1'bx ) && ( symbol_prev[22] !== symbol_expected_prev[22] )
		&& ((symbol_expected_prev[22] !== last_symbol_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[22] = symbol_expected_prev[22];
	end
	if (
		( symbol_expected_prev[23] !== 1'bx ) && ( symbol_prev[23] !== symbol_expected_prev[23] )
		&& ((symbol_expected_prev[23] !== last_symbol_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[23] = symbol_expected_prev[23];
	end
	if (
		( symbol_expected_prev[24] !== 1'bx ) && ( symbol_prev[24] !== symbol_expected_prev[24] )
		&& ((symbol_expected_prev[24] !== last_symbol_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[24] = symbol_expected_prev[24];
	end
	if (
		( symbol_expected_prev[25] !== 1'bx ) && ( symbol_prev[25] !== symbol_expected_prev[25] )
		&& ((symbol_expected_prev[25] !== last_symbol_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[25] = symbol_expected_prev[25];
	end
	if (
		( symbol_expected_prev[26] !== 1'bx ) && ( symbol_prev[26] !== symbol_expected_prev[26] )
		&& ((symbol_expected_prev[26] !== last_symbol_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[26] = symbol_expected_prev[26];
	end
	if (
		( symbol_expected_prev[27] !== 1'bx ) && ( symbol_prev[27] !== symbol_expected_prev[27] )
		&& ((symbol_expected_prev[27] !== last_symbol_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[27] = symbol_expected_prev[27];
	end
	if (
		( symbol_expected_prev[28] !== 1'bx ) && ( symbol_prev[28] !== symbol_expected_prev[28] )
		&& ((symbol_expected_prev[28] !== last_symbol_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[28] = symbol_expected_prev[28];
	end
	if (
		( symbol_expected_prev[29] !== 1'bx ) && ( symbol_prev[29] !== symbol_expected_prev[29] )
		&& ((symbol_expected_prev[29] !== last_symbol_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[29] = symbol_expected_prev[29];
	end
	if (
		( symbol_expected_prev[30] !== 1'bx ) && ( symbol_prev[30] !== symbol_expected_prev[30] )
		&& ((symbol_expected_prev[30] !== last_symbol_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[30] = symbol_expected_prev[30];
	end
	if (
		( symbol_expected_prev[31] !== 1'bx ) && ( symbol_prev[31] !== symbol_expected_prev[31] )
		&& ((symbol_expected_prev[31] !== last_symbol_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port symbol[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", symbol_expected_prev);
		$display ("     Real value = %b", symbol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_symbol_exp[31] = symbol_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module mod_com_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg code[0];
reg code[1];
reg code[2];
reg code[3];
reg code[4];
reg code_0_0;
reg code_0_1;
reg code_1_0;
reg code_1_1;
reg code_2_0;
reg code_2_1;
reg code_3_0;
reg code_3_1;
reg code_4_0;
reg code_4_1;
reg enter;
// wires                                               
wire code_0_1;
wire code_0_0;
wire code_1_1;
wire code_1_0;
wire code_2_1;
wire code_2_0;
wire code_3_1;
wire code_3_0;
wire code_4_1;
wire code_4_0;
wire [31:0] symbol;

wire sampler;                             

// assign statements (if any)                          
assign code = treg_code;
mod_com i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.\code[0] (code[0]),
	.\code[1] (code[1]),
	.\code[2] (code[2]),
	.\code[3] (code[3]),
	.\code[4] (code[4]),
	.code_0_0(code_0_0),
	.code_0_1(code_0_1),
	.code_1_0(code_1_0),
	.code_1_1(code_1_1),
	.code_2_0(code_2_0),
	.code_2_1(code_2_1),
	.code_3_0(code_3_0),
	.code_3_1(code_3_1),
	.code_4_0(code_4_0),
	.code_4_1(code_4_1),
	.enter(enter),
	.symbol(symbol)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// code[0]
initial
begin
	treg_code[0] = 1'bZ;
end 

// code[1]
initial
begin
	treg_code[1] = 1'bZ;
end 

// code[2]
initial
begin
	treg_code[2] = 1'bZ;
end 

// code[3]
initial
begin
	treg_code[3] = 1'bZ;
end 

// code[4]
initial
begin
	treg_code[4] = 1'bZ;
end 

// code[0][0]
initial
begin
	treg_code[0][0] = 1'bZ;
end 

// code[0][1]
initial
begin
	treg_code[0][1] = 1'bZ;
end 

// code[1][0]
initial
begin
	treg_code[1][0] = 1'bZ;
end 

// code[1][1]
initial
begin
	treg_code[1][1] = 1'bZ;
end 

// code[2][0]
initial
begin
	treg_code[2][0] = 1'bZ;
end 

// code[2][1]
initial
begin
	treg_code[2][1] = 1'bZ;
end 

// code[3][0]
initial
begin
	treg_code[3][0] = 1'bZ;
end 

// code[3][1]
initial
begin
	treg_code[3][1] = 1'bZ;
end 

// code[4][0]
initial
begin
	treg_code[4][0] = 1'bZ;
end 

// code[4][1]
initial
begin
	treg_code[4][1] = 1'bZ;
end 

// enter
initial
begin
	enter = 1'b0;
end 

mod_com_vlg_sample_tst tb_sample (
	.clk(clk),
	.code_0_1(code_0_1),
	.code_0_0(code_0_0),
	.code_1_1(code_1_1),
	.code_1_0(code_1_0),
	.code_2_1(code_2_1),
	.code_2_0(code_2_0),
	.code_3_1(code_3_1),
	.code_3_0(code_3_0),
	.code_4_1(code_4_1),
	.code_4_0(code_4_0),
	.enter(enter),
	.sampler_tx(sampler)
);

mod_com_vlg_check_tst tb_out(
	.code_0_1(code_0_1),
	.code_0_0(code_0_0),
	.code_1_1(code_1_1),
	.code_1_0(code_1_0),
	.code_2_1(code_2_1),
	.code_2_0(code_2_0),
	.code_3_1(code_3_1),
	.code_3_0(code_3_0),
	.code_4_1(code_4_1),
	.code_4_0(code_4_0),
	.symbol(symbol),
	.sampler_rx(sampler)
);
endmodule

