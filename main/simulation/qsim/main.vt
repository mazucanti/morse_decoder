// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/20/2019 23:18:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clock,
	input_button,
	sampler_tx
);
input  clock;
input  input_button;
output sampler_tx;

reg sample;
time current_time;
always @(clock or input_button)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	code_test0,
	code_test1,
	code_test2,
	code_test3,
	code_test4,
	index_test,
	led,
	sampler_rx
);
input [2:0] code_test0;
input [2:0] code_test1;
input [2:0] code_test2;
input [2:0] code_test3;
input [2:0] code_test4;
input [2:0] index_test;
input [0:4] led;
input sampler_rx;

reg [2:0] code_test0_expected;
reg [2:0] code_test1_expected;
reg [2:0] code_test2_expected;
reg [2:0] code_test3_expected;
reg [2:0] code_test4_expected;
reg [2:0] index_test_expected;
reg [0:4] led_expected;

reg [2:0] code_test0_prev;
reg [2:0] code_test1_prev;
reg [2:0] code_test2_prev;
reg [2:0] code_test3_prev;
reg [2:0] code_test4_prev;
reg [2:0] index_test_prev;
reg [0:4] led_prev;

reg [2:0] code_test0_expected_prev;
reg [2:0] code_test1_expected_prev;
reg [2:0] code_test2_expected_prev;
reg [2:0] code_test3_expected_prev;
reg [2:0] code_test4_expected_prev;
reg [2:0] index_test_expected_prev;
reg [0:4] led_expected_prev;

reg [2:0] last_code_test0_exp;
reg [2:0] last_code_test1_exp;
reg [2:0] last_code_test2_exp;
reg [2:0] last_code_test3_exp;
reg [2:0] last_code_test4_exp;
reg [2:0] last_index_test_exp;
reg [0:4] last_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	code_test0_prev = code_test0;
	code_test1_prev = code_test1;
	code_test2_prev = code_test2;
	code_test3_prev = code_test3;
	code_test4_prev = code_test4;
	index_test_prev = index_test;
	led_prev = led;
end

// update expected /o prevs

always @(trigger)
begin
	code_test0_expected_prev = code_test0_expected;
	code_test1_expected_prev = code_test1_expected;
	code_test2_expected_prev = code_test2_expected;
	code_test3_expected_prev = code_test3_expected;
	code_test4_expected_prev = code_test4_expected;
	index_test_expected_prev = index_test_expected;
	led_expected_prev = led_expected;
end


// expected code_test0[ 2 ]
initial
begin
	code_test0_expected[2] = 1'bX;
end 
// expected code_test0[ 1 ]
initial
begin
	code_test0_expected[1] = 1'bX;
end 
// expected code_test0[ 0 ]
initial
begin
	code_test0_expected[0] = 1'bX;
end 
// expected code_test1[ 2 ]
initial
begin
	code_test1_expected[2] = 1'bX;
end 
// expected code_test1[ 1 ]
initial
begin
	code_test1_expected[1] = 1'bX;
end 
// expected code_test1[ 0 ]
initial
begin
	code_test1_expected[0] = 1'bX;
end 
// expected code_test2[ 2 ]
initial
begin
	code_test2_expected[2] = 1'bX;
end 
// expected code_test2[ 1 ]
initial
begin
	code_test2_expected[1] = 1'bX;
end 
// expected code_test2[ 0 ]
initial
begin
	code_test2_expected[0] = 1'bX;
end 
// expected code_test3[ 2 ]
initial
begin
	code_test3_expected[2] = 1'bX;
end 
// expected code_test3[ 1 ]
initial
begin
	code_test3_expected[1] = 1'bX;
end 
// expected code_test3[ 0 ]
initial
begin
	code_test3_expected[0] = 1'bX;
end 
// expected code_test4[ 2 ]
initial
begin
	code_test4_expected[2] = 1'bX;
end 
// expected code_test4[ 1 ]
initial
begin
	code_test4_expected[1] = 1'bX;
end 
// expected code_test4[ 0 ]
initial
begin
	code_test4_expected[0] = 1'bX;
end 
// expected index_test[ 2 ]
initial
begin
	index_test_expected[2] = 1'bX;
end 
// expected index_test[ 1 ]
initial
begin
	index_test_expected[1] = 1'bX;
end 
// expected index_test[ 0 ]
initial
begin
	index_test_expected[0] = 1'bX;
end 
// expected led[ 4 ]
initial
begin
	led_expected[4] = 1'bX;
end 
// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 
// generate trigger
always @(code_test0_expected or code_test0 or code_test1_expected or code_test1 or code_test2_expected or code_test2 or code_test3_expected or code_test3 or code_test4_expected or code_test4 or index_test_expected or index_test or led_expected or led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected code_test0 = %b | expected code_test1 = %b | expected code_test2 = %b | expected code_test3 = %b | expected code_test4 = %b | expected index_test = %b | expected led = %b | ",code_test0_expected_prev,code_test1_expected_prev,code_test2_expected_prev,code_test3_expected_prev,code_test4_expected_prev,index_test_expected_prev,led_expected_prev);
	$display("| real code_test0 = %b | real code_test1 = %b | real code_test2 = %b | real code_test3 = %b | real code_test4 = %b | real index_test = %b | real led = %b | ",code_test0_prev,code_test1_prev,code_test2_prev,code_test3_prev,code_test4_prev,index_test_prev,led_prev);
`endif
	if (
		( code_test0_expected_prev[0] !== 1'bx ) && ( code_test0_prev[0] !== code_test0_expected_prev[0] )
		&& ((code_test0_expected_prev[0] !== last_code_test0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test0_expected_prev);
		$display ("     Real value = %b", code_test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_test0_exp[0] = code_test0_expected_prev[0];
	end
	if (
		( code_test0_expected_prev[1] !== 1'bx ) && ( code_test0_prev[1] !== code_test0_expected_prev[1] )
		&& ((code_test0_expected_prev[1] !== last_code_test0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test0_expected_prev);
		$display ("     Real value = %b", code_test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_test0_exp[1] = code_test0_expected_prev[1];
	end
	if (
		( code_test0_expected_prev[2] !== 1'bx ) && ( code_test0_prev[2] !== code_test0_expected_prev[2] )
		&& ((code_test0_expected_prev[2] !== last_code_test0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test0_expected_prev);
		$display ("     Real value = %b", code_test0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_test0_exp[2] = code_test0_expected_prev[2];
	end
	if (
		( code_test1_expected_prev[0] !== 1'bx ) && ( code_test1_prev[0] !== code_test1_expected_prev[0] )
		&& ((code_test1_expected_prev[0] !== last_code_test1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test1_expected_prev);
		$display ("     Real value = %b", code_test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_test1_exp[0] = code_test1_expected_prev[0];
	end
	if (
		( code_test1_expected_prev[1] !== 1'bx ) && ( code_test1_prev[1] !== code_test1_expected_prev[1] )
		&& ((code_test1_expected_prev[1] !== last_code_test1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test1_expected_prev);
		$display ("     Real value = %b", code_test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_test1_exp[1] = code_test1_expected_prev[1];
	end
	if (
		( code_test1_expected_prev[2] !== 1'bx ) && ( code_test1_prev[2] !== code_test1_expected_prev[2] )
		&& ((code_test1_expected_prev[2] !== last_code_test1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test1_expected_prev);
		$display ("     Real value = %b", code_test1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_code_test1_exp[2] = code_test1_expected_prev[2];
	end
	if (
		( code_test2_expected_prev[0] !== 1'bx ) && ( code_test2_prev[0] !== code_test2_expected_prev[0] )
		&& ((code_test2_expected_prev[0] !== last_code_test2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test2_expected_prev);
		$display ("     Real value = %b", code_test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_code_test2_exp[0] = code_test2_expected_prev[0];
	end
	if (
		( code_test2_expected_prev[1] !== 1'bx ) && ( code_test2_prev[1] !== code_test2_expected_prev[1] )
		&& ((code_test2_expected_prev[1] !== last_code_test2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test2_expected_prev);
		$display ("     Real value = %b", code_test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_code_test2_exp[1] = code_test2_expected_prev[1];
	end
	if (
		( code_test2_expected_prev[2] !== 1'bx ) && ( code_test2_prev[2] !== code_test2_expected_prev[2] )
		&& ((code_test2_expected_prev[2] !== last_code_test2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test2_expected_prev);
		$display ("     Real value = %b", code_test2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_code_test2_exp[2] = code_test2_expected_prev[2];
	end
	if (
		( code_test3_expected_prev[0] !== 1'bx ) && ( code_test3_prev[0] !== code_test3_expected_prev[0] )
		&& ((code_test3_expected_prev[0] !== last_code_test3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test3_expected_prev);
		$display ("     Real value = %b", code_test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_code_test3_exp[0] = code_test3_expected_prev[0];
	end
	if (
		( code_test3_expected_prev[1] !== 1'bx ) && ( code_test3_prev[1] !== code_test3_expected_prev[1] )
		&& ((code_test3_expected_prev[1] !== last_code_test3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test3_expected_prev);
		$display ("     Real value = %b", code_test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_code_test3_exp[1] = code_test3_expected_prev[1];
	end
	if (
		( code_test3_expected_prev[2] !== 1'bx ) && ( code_test3_prev[2] !== code_test3_expected_prev[2] )
		&& ((code_test3_expected_prev[2] !== last_code_test3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test3_expected_prev);
		$display ("     Real value = %b", code_test3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_code_test3_exp[2] = code_test3_expected_prev[2];
	end
	if (
		( code_test4_expected_prev[0] !== 1'bx ) && ( code_test4_prev[0] !== code_test4_expected_prev[0] )
		&& ((code_test4_expected_prev[0] !== last_code_test4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test4_expected_prev);
		$display ("     Real value = %b", code_test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_code_test4_exp[0] = code_test4_expected_prev[0];
	end
	if (
		( code_test4_expected_prev[1] !== 1'bx ) && ( code_test4_prev[1] !== code_test4_expected_prev[1] )
		&& ((code_test4_expected_prev[1] !== last_code_test4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test4_expected_prev);
		$display ("     Real value = %b", code_test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_code_test4_exp[1] = code_test4_expected_prev[1];
	end
	if (
		( code_test4_expected_prev[2] !== 1'bx ) && ( code_test4_prev[2] !== code_test4_expected_prev[2] )
		&& ((code_test4_expected_prev[2] !== last_code_test4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_test4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_test4_expected_prev);
		$display ("     Real value = %b", code_test4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_code_test4_exp[2] = code_test4_expected_prev[2];
	end
	if (
		( index_test_expected_prev[0] !== 1'bx ) && ( index_test_prev[0] !== index_test_expected_prev[0] )
		&& ((index_test_expected_prev[0] !== last_index_test_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port index_test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", index_test_expected_prev);
		$display ("     Real value = %b", index_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_index_test_exp[0] = index_test_expected_prev[0];
	end
	if (
		( index_test_expected_prev[1] !== 1'bx ) && ( index_test_prev[1] !== index_test_expected_prev[1] )
		&& ((index_test_expected_prev[1] !== last_index_test_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port index_test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", index_test_expected_prev);
		$display ("     Real value = %b", index_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_index_test_exp[1] = index_test_expected_prev[1];
	end
	if (
		( index_test_expected_prev[2] !== 1'bx ) && ( index_test_prev[2] !== index_test_expected_prev[2] )
		&& ((index_test_expected_prev[2] !== last_index_test_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port index_test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", index_test_expected_prev);
		$display ("     Real value = %b", index_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_index_test_exp[2] = index_test_expected_prev[2];
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end
	if (
		( led_expected_prev[4] !== 1'bx ) && ( led_prev[4] !== led_expected_prev[4] )
		&& ((led_expected_prev[4] !== last_led_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp[4] = led_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg input_button;
// wires                                               
wire [2:0] code_test0;
wire [2:0] code_test1;
wire [2:0] code_test2;
wire [2:0] code_test3;
wire [2:0] code_test4;
wire [2:0] index_test;
wire [0:4] led;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.code_test0(code_test0),
	.code_test1(code_test1),
	.code_test2(code_test2),
	.code_test3(code_test3),
	.code_test4(code_test4),
	.index_test(index_test),
	.input_button(input_button),
	.led(led)
);

// clock
always
begin
	clock = 1'b0;
	clock = #1000 1'b1;
	#1000;
end 

// input_button
initial
begin
	input_button = 1'b0;
	input_button = #100000 1'b1;
	input_button = #100000 1'b0;
	input_button = #100000 1'b1;
	input_button = #100000 1'b0;
	input_button = #100000 1'b1;
	input_button = #100000 1'b0;
	input_button = #100000 1'b1;
	input_button = #200000 1'b0;
end 

main_vlg_sample_tst tb_sample (
	.clock(clock),
	.input_button(input_button),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.code_test0(code_test0),
	.code_test1(code_test1),
	.code_test2(code_test2),
	.code_test3(code_test3),
	.code_test4(code_test4),
	.index_test(index_test),
	.led(led),
	.sampler_rx(sampler)
);
endmodule

